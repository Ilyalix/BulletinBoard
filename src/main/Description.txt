Author:
POST:
{   "id": 0,
    "version": 0,
	"name": "Vasya",
	"phones": [{
	         "id": 0,
             "version": 0,
		     "phone": 111
		},
		{
		     "id": 0,
             "version": 0,
		     "phone": 222
		}
	],
	"address": {
	         "id": 0,
             "version": 0,
	         "city": "NY"
	},
	"email": {
             "id": 0,
             "version": 0,
	         "email": "rambler.ru"
	}
}
CascadeType.MERGE and PERSIST

PUT:
    {
   "id": 13,
   "name": "Petya",
   "version": 0,
   "phones": [
     {
       "id":19,
       "version": 0,
       "phone": 6655,
       "author":13
     },
     {
       "id":20,
       "version": 0,
       "phone": 7788,
       "author":13
     }
   ],
   "address": {
     "id":13,
     "version": 0,
     "city": "Moscow"
   },
   "email": {
     "id":13,
     "version": 0,
     "email": "vk.ru"
   }
}


CATEGORY:
POST:
{
    "id":0,
    "version": 0,
    "name": "Clothes"
}

PUT:
{
  "id":8,
  "version": 0,
  "name": "Clothes"
}

ADVERTISEMENT:
POST: (указываем id сущ. автора и категории)
{
  "id": 0,
  "version": 0,
  "active": 1,
  "name": "Moto",
  "dateOfPublic": "2019-10-10",
  "text": "отдам",
  "price": 3,
    "author": {
      "id": 13,
      "version": 0
    },
    "category": {
      "id": 5,
      "version": 0
    }
}

PUT:
{
  "id": 19,
  "version": 0,
  "active": 1,
  "name": "Moto",
  "dateOfPublic": "2017-10-10",
  "text": "отдам",
  "price": 3,
    "author": {
      "id": 12,
      "version": 0
    },
    "category": {
      "id": 5,
      "version": 0
    }
}

matchingAd:
POST:
{
  "id": 0,
  "version": 0,
  "title": "Продам дом",
   "priceTo": 2,
   "priceFrom": 10,
   "author": {
          "id": 5,
          "version": 0
     },
     "category": {
          "id": 7,
          "version": 0
     }
}

PUT:
{
  "id": 6,
  "version": 0,
  "title": "Продам дом",
   "priceTo": 2,
   "priceFrom": 10,
   "author": {
       "id": 11,
       "version": 2
  },
  "category": {
       "id": 7,
       "version": 0
  }
}






AuthorDAOImpl

        List<Phone> collect = author.getPhones().stream().filter(m -> m.getId() == 5).collect(Collectors.toList());
        System.out.println(collect);

        List<Phone> collect1 = author.getPhones().stream().peek(k -> k.getPhone()).collect(Collectors.toList());
        System.out.println(collect1);


