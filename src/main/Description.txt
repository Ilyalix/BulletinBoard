Author:
POST:
{
  "id": 0,
  "version": 0,
  "name": "Kolya",
  "age": 25,
  "password": "123456",
  "active": true,
  "roles": [
    {
      "id": 1
    }
  ],
  "phones": [
    {
      "id": 0,
      "version": 0,
      "phone": 111
    },
    {
      "id": 0,
      "version": 0,
      "phone": 222
    }
  ],
  "address": {
    "id": 0,
    "version": 0,
    "city": "NY"
  },
  "email": {
    "id": 0,
    "version": 0,
    "email": "rambler.ru"
  }
}

CascadeType.MERGE and PERSIST
можно добавить автора в Phones:
author.getPhones().forEach(t->t.setAuthor(author));


PUT:
  {
    "id": 1,
    "name": "Kolya",
    "version": 0,
    "password": "123",
    "active": true,
    "roles": [
      {
        "id": 1,
        "name": "ROLE_ADMIN"
      }
    ],
    "phones": [
      {
        "id":1,
        "version": 0,
        "phone": 900,
        "author":1
      },
      {
        "id":2,
        "version": 0,
        "phone": 800,
        "author":1
      }
    ],
    "address": {
      "id":1,
      "version": 0,
      "city": "Moscow city"
    },
    "email": {
      "id":1,
      "version": 0,
      "email": "vk2.ru"
    }
  }


CATEGORY:
POST:
{
    "id":0,
    "version": 0,
    "name": "Clothes"
}

PUT:
{
  "id":8,
  "version": 0,
  "name": "Clothes"
}

ADVERTISEMENT:
POST: (указываем id сущ. автора и категории)
{
  "id": 0,
  "version": 0,
  "active": 1,
  "name": "Moto",
  "dateOfPublic": "2019-10-10",
  "text": "отдам",
  "price": 3,
    "author": {
      "id": 13,
      "version": 0
    },
    "category": {
      "id": 5,
      "version": 0
    }
}

PUT:
{
  "id": 19,
  "version": 0,
  "active": 1,
  "name": "Moto",
  "dateOfPublic": "2017-10-10",
  "text": "отдам",
  "price": 3,
    "author": {
      "id": 12,
      "version": 0
    },
    "category": {
      "id": 5,
      "version": 0
    }
}

matchingAd:
POST:
{
  "id": 0,
  "version": 0,
  "title": "Продам дом",
   "priceTo": 10,
   "priceFrom": 2,
   "author": {
          "id": 5,
          "version": 0
     },
     "category": {
          "id": 7,
          "version": 0
     }
}

PUT:
{
  "id": 6,
  "version": 0,
  "title": "Продам дом",
   "priceTo": 2,
   "priceFrom": 10,
   "author": {
       "id": 11,
       "version": 2
  },
  "category": {
       "id": 7,
       "version": 0
  }
}

Role:
POST:
{
   "id": 0,
   "name": "ROLE_USER"
}

Pagin:
{
  "page": 0,
  "size": 2
}






форма лоогина через тайленд:
http://localhost:9999/login?username=Jacky&password=123456
при логине UserDetailsService находит по логину нужного юзер и создает временный объект юзера типа User,
который берет из БД логин(name), пароль, активность и роли.

JWT:
registration:
http://localhost:9999/bulletin/jwt/registration

{
  "id": 0,
  "version": 0,
  "name": "Benny",
  "age": 25,
  "password": "123456",
  "active": true,
  "roles": [
    {
      "id": 1
    }
  ],
  "phones": [
    {
      "id": 0,
      "version": 0,
      "phone": 111
    },
    {
      "id": 0,
      "version": 0,
      "phone": 222
    }
  ],
  "address": {
    "id": 0,
    "version": 0,
    "city": "NY"
  },
  "email": {
    "id": 0,
    "version": 0,
    "email": "rambler.ru"
  }
}






authentication:
http://localhost:9999/bulletin/jwt/authenticate
{
  "username":"Benny",
  "password":123456
}










AuthorDAOImpl

        List<Phone> collect = author.getPhones().stream().filter(m -> m.getId() == 5).collect(Collectors.toList());
        System.out.println(collect);

        List<Phone> collect1 = author.getPhones().stream().peek(k -> k.getPhone()).collect(Collectors.toList());
        System.out.println(collect1);

        List<String> phones = authorName.getPhones().stream().map(p -> p.getPhone()).collect(Collectors.toList());


